Reference sheet: 
Tools
Caffee
TensorFlow
(Py)Torch
DeepDream
NeuralStyle
 Data-Driven Approach
1. Collect a dataset of images and labels
2. Use Machine Learning to train a classifier
3. Evaluate the classifier on new images
Nearest Neighbor
Train O(1) - Memorize all data and labels
Predict O(N) - Predict the label of the most similar training image
Distance Metric L1 (Manhattan) distance:
Test image matrix - training image matrix = pixel-wise absolute value differences matrix
L2 (Euclidean) distance
Hyperparameters
What is the best value of K to use?
What is the best distance to use?
These are choices about the algorithm that we set rather than learn
Choose hyperparameters using validation set
A loss function tells us how good our current classifier is 

We want to have close to zero loss 
So if we have cat - 2.9 car - 0 frog - 12.9 loss our L sum loss would be 
L = (2.9 + 0 + 12.9)/3 = 5.27


 Data loss: Model predictions should match training data
Occam’s Razor:
“Among competing hypotheses, the simplest is the best”
 Softmax Classifier (Multinomial Logistic Regression)

In practice: Always use analytic gradient, but check implementation with numerical gradient. This is called a gradient check.

 Finding local gradient:


 Sigmoid function
Numpy array indexing:
import numpy as np

# Create the following rank 2 array with shape (3, 4)
# [[ 1  2  3  4]
#  [ 5  6  7  8]
#  [ 9 10 11 12]]
a = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])

# Use slicing to pull out the subarray consisting of the first 2 rows
# and columns 1 and 2; b is the following array of shape (2, 2):
# [[2 3]
#  [6 7]]
b = a[:2, 1:3]
print (b)
[[2 3]
 [6 7]]
c = a[:3, 0:2]
print(c) 
[[ 1  2]
 [ 5  6]
 [ 9 10]]



A slice of an array is a view into the same data, so modifying it will modify the original array.
print (a[0, 1] ) # gives 2
b[0, 0] = 77    # b[0, 0] is the same piece of data as a[0, 1]
print (a[0, 1] ) # now gives 77 
Integer array indexing
import numpy as np
a = np.array([[1,2], [3, 4], [5, 6]])
print(a)
[[1 2]
 [3 4]
 [5 6]]

# An example of integer array indexing.
# The returned array will have shape (3,) and 
print (a[[0, 1, 2], [0, 1, 0]])
[1 4 5]

# The above example of integer array indexing is equivalent to this:
print (np.array([a[0, 0], a[1, 1], a[2, 0]]))
[1 4 5]




