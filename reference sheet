Reference sheet: 
Tools
Caffee
TensorFlow
(Py)Torch
DeepDream
NeuralStyle
 Data-Driven Approach
1. Collect a dataset of images and labels
2. Use Machine Learning to train a classifier
3. Evaluate the classifier on new images
Nearest Neighbor
Train O(1) - Memorize all data and labels
Predict O(N) - Predict the label of the most similar training image
Distance Metric L1 (Manhattan) distance:
Test image matrix - training image matrix = pixel-wise absolute value differences matrix
L2 (Euclidean) distance
Hyperparameters
What is the best value of K to use?
What is the best distance to use?
These are choices about the algorithm that we set rather than learn
Choose hyperparameters using validation set
A loss function tells us how good our current classifier is 

We want to have close to zero loss 
So if we have cat - 2.9 car - 0 frog - 12.9 loss our L sum loss would be 
L = (2.9 + 0 + 12.9)/3 = 5.27


 Data loss: Model predictions should match training data
Occam’s Razor:
“Among competing hypotheses, the simplest is the best”
 Softmax Classifier (Multinomial Logistic Regression)

In practice: Always use analytic gradient, but check implementation with numerical gradient. This is called a gradient check.

 Finding local gradient:


 Sigmoid function
Numpy array indexing:
import numpy as np

# Create the following rank 2 array with shape (3, 4)
# [[ 1  2  3  4]
#  [ 5  6  7  8]
#  [ 9 10 11 12]]
a = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])

# Use slicing to pull out the subarray consisting of the first 2 rows
# and columns 1 and 2; b is the following array of shape (2, 2):
# [[2 3]
#  [6 7]]
b = a[:2, 1:3]
print (b)
[[2 3]
 [6 7]]
c = a[:3, 0:2]
print(c) 
[[ 1  2]
 [ 5  6]
 [ 9 10]]



A slice of an array is a view into the same data, so modifying it will modify the original array.
print (a[0, 1] ) # gives 2
b[0, 0] = 77    # b[0, 0] is the same piece of data as a[0, 1]
print (a[0, 1] ) # now gives 77 
Integer array indexing
import numpy as np
a = np.array([[1,2], [3, 4], [5, 6]])
print(a)
[[1 2]
 [3 4]
 [5 6]]

# An example of integer array indexing.
# The returned array will have shape (3,) and 
print (a[[0, 1, 2], [0, 1, 0]])
[1 4 5]

# The above example of integer array indexing is equivalent to this:
print (np.array([a[0, 0], a[1, 1], a[2, 0]]))
[1 4 5]

# When using integer array indexing, you can reuse the same
# element from the source array:
print (a[[0, 0], [1, 1]]) #meaning go to row 0 both times and take element 1 both times
[2 2]
# Equivalent to the previous integer array indexing example
print (np.array([a[0, 1], a[0, 1]]))
[2 2]


Boolean array indexing
import numpy as np

a = np.array([[1,2], [3, 4], [5, 6]])

bool_idx = (a > 2)  # Find the elements of a that are bigger than 2;
                    # this returns a numpy array of Booleans of the same
                    # shape as a, where each slot of bool_idx tells
                    # whether that element of a is > 2.

print bool_idx
[[False False]
 [ True  True]
 [ True  True]]

* is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of vectors, to multiply a vector by a matrix, and to multiply matrices.
x = np.array([[1,2],[3,4]])
y = np.array([[5,6],[7,8]])

v = np.array([9,10])
w = np.array([11, 12])

# Inner product of vectors; both produce 219
print v.dot(w)
print np.dot(v, w)

Suming of arrays
x = np.array([[1,2],[3,4]])

print np.sum(x)  # Compute sum of all elements; prints "10"
print np.sum(x, axis=0)  # Compute sum of each column; prints "[4 6]"
print np.sum(x, axis=1)  # Compute sum of each row; prints "[3 7]"

transposing a matrix
print x
[[1 2]
 [3 4]]

print x.T
[[1 3]
 [2 4]]

Broadcasting
# We will add the vector v to each row of the matrix x,
# storing the result in the matrix y
x = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])
v = np.array([1, 0, 1])
y = np.empty_like(x)   # Create an empty matrix with the same shape as x

# Add the vector v to each row of the matrix x with an explicit loop
for i in range(4):
    y[i, :] = x[i, :] + v

print y
[[ 2  2  4]
 [ 5  5  7]
 [ 8  8 10]
 [11 11 13]]

Or an easier and faster way:
v = np.array([1, 0, 1])
x = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])
vv = np.tile(v, (4, 1))  # Stack 4 copies of v on top of each other
print vv                 # Prints "[[1 0 1]
                         #          [1 0 1]
                         #          [1 0 1]
                         #          [1 0 1]]"
y = x + vv  # Add x and vv elementwise
print y
[[ 2  2  4]
 [ 5  5  7]
 [ 8  8 10]
 [11 11 13]]
 
Even easier way:
import numpy as np

# We will add the vector v to each row of the matrix x,
# storing the result in the matrix y
x = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])
v = np.array([1, 0, 1])
y = x + v  # Add v to each row of x using broadcasting
print y
[[ 2  2  4]
 [ 5  5  7]
 [ 8  8 10]
 [11 11 13]]




